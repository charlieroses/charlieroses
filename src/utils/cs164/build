#!/bin/bash

function usage {
	echo -e "src/utils/cs164/build [hft]"
	echo -e "\t-h help"
	echo -e "\t-f force build all pages"
	echo -e "\t-t local testing mode"
}

RSAC=( "purple" "green" "rainbow" "halloween" )

MARKDOWN_SRC="src/cs164/"
SRC="src/cs164/"
DESTINATION="cs164/"
SECTIONS_FILE="src/cs164/sections.tsv"
UTILS="src/utils/cs164"
TEMPLATE="$(cat "${UTILS}/template.html")"
ERRORMSG="$(cat "${UTILS}/error.html")"

FARG=""
TARG=""
while getopts "hft" opt
do
	case "${opt}" in
		h)
			usage
			exit 1
			;;
		f)
			FARG="1"
			;;
		t)
			TARG="$(pwd)"
	esac
done

while IFS= read -r LINE
do
	SEC="$(echo "${LINE}" | cut -f1)"
	TITLE="$(echo "${LINE}" | cut -f2)"
	DIR="$(echo "${LINE}" | cut -f3)"
	FILE="$(echo "${LINE}" | cut -f4)"
	UPDATE="$(echo "${LINE}" | cut -f5)"

	INFILE="${MARKDOWN_SRC}${DIR}/${FILE}.md"
	OUTFILE="${DESTINATION}${DIR}/${FILE}.html"

	# Don't try to build files that don't exist
	if [[ -e "${INFILE%md}man" ]]
	then
		INFILE="${INFILE%md}man"

		if [[ -n "${FARG}" ]] ||
		   [[ "${INFILE}" -nt "${OUTFILE}" ]]
		then
			"${UTILS}/build_manpage" "${INFILE}" "${TARG}"
		fi

		continue
	elif [[ ! -e "${INFILE}" ]]
	then
		continue
	fi

	# For time saving, don't build things we don't need to
	if [[ -z "${FARG}" ]] &&
	   [[ "${OUTFILE}" -nt "${INFILE}" ]]
	then
		continue
	fi

	echo "Building ${OUTFILE}"

	HTML="${TEMPLATE}"
	CONTENT=""

	if [[ -n "${TARG}" ]]
	then
		HTML="${HTML/"/cs164/"/"${TARG}/cs164/"}"
	fi

	NAV="$("${UTILS}/generate_navigation" "${SEC}")"

	LINKS=""
	if [[ -e "${DESTINATION}/${DIR}/${DIR}.css" ]]
	then
		LINKS="${LINKS}\t<link rel=\"stylesheet\" href=\"${DIR}/${DIR}.css\">\n"
	fi
	if [[ -e "${SRC}/${DIR}/${DIR}.js" ]]
	then
		LINKS="${LINKS}\t<script src=\"${DIR}/${DIR}.js\"></script>"
		cat "${SRC}/practice.js" "${SRC}/${DIR}/${DIR}.js" > "${DESTINATION}/${DIR}/${DIR}.js"
		echo "Built ${DESTINATION}/${DIR}/${DIR}.js"
	fi
	if [[ -e "${UTILS}/${DIR}_links.txt" ]]
	then
		LINKS="${LINKS}$(cat "${UTILS}/${DIR}_links.txt")"
	fi

	CONTENT="$("${UTILS}/mdtohtml.awk" "${INFILE}")"
	if [[ "${SEC}" != "0" ]]
	then
		TITLE="${SEC} : ${TITLE}"

		if [[ "${SEC}" != *"."* ]]
		then
			TITLE="Chapter ${TITLE}"
		fi
		CONTENT="\t\t<div class=\"content\">\n\t\t<h1>${TITLE}</h1>\n\t</div>\n\t<hr>\n${CONTENT}"
	fi

	if [[ "${FILE}" = "index" ]]
	then
		SECLIST="$("${UTILS}/generate_sectionlist" "${SEC}")"
		CONTENT="${CONTENT/"<!-- SECTION LIST -->"/"${SECLIST}"}"
	fi

	SIDEBAR="$("${UTILS}/generate_sidebar" "${SEC}")"

	HTML="${HTML//"<!-- FILES -->"/"${LINKS}"}"
	HTML="${HTML//"<!-- SIDEBAR -->"/"${SIDEBAR}"}"
	HTML="${HTML/"<!-- NAVIGATION -->"/"${NAV/"ID"/"top"}"}"
	HTML="${HTML/"<!-- NAVIGATION -->"/"${NAV/"ID"/"bottom"}"}"
	HTML="${HTML//"<!-- CONTENT -->"/"${CONTENT}"}"
	[[ -z "${UPDATE}" ]] && HTML="${HTML//"<!-- ERROR -->"/"${ERRORMSG}"}"
	HTML="$(echo "${HTML}" | sed "s/#top/${DIR}\/${FILE}.html#top/g" )"

	echo -e "${HTML}" > "${OUTFILE}"
	
	if [[ "${INFILE}" = *"rsa.md" ]]
	then
		for COLOR in "${RSAC[@]}"
		do
			echo "Building ${OUTFILE%.html}${COLOR:0:1}.html"
			sed "s/COLORDIR/${COLOR}/g" "${OUTFILE}" > "${OUTFILE%.html}${COLOR:0:1}.html"
		done
		I="$(( $RANDOM % ${#RSAC[@]} ))"
		sed -i "s/COLORDIR/${RSAC[$I]}/g" "${OUTFILE}"
	fi

done <<< "$(tail -n +2 ${SECTIONS_FILE})"

if [[ -n "${FARG}" ]] ||
   [[ "${SRC}/practice.md" -nt "${DESTINATION}/practice.html" ]] ||
   [[ "${SRC}/practice.tsv" -nt "${DESTINATION}/practice.html" ]]
then
	echo "Building ${DESTINATION}practice.html"

	SIDEBAR="$("${UTILS}/generate_sidebar")"
	CONTENT="$("${UTILS}/build_practiceglossary")"
	CONTENT="\t<div class=\"content\">\n\t\t<h1>How To Use This Book</h1>\n\t</div>\n\t<hr>\n${CONTENT}"

	HTML="${TEMPLATE}"

	HTML="${HTML//"<!-- SIDEBAR -->"/"${SIDEBAR}"}"
	HTML="${HTML//"<!-- CONTENT -->"/"${CONTENT}"}"
	HTML="$(echo "${HTML}" | sed "s/#top/practice.html#top/g" )"

	if [[ -n "${TARG}" ]]
	then
		HTML="${HTML/"/cs164/"/"${TARG}/cs164/"}"
	fi

	echo -e "${HTML}" > "${DESTINATION}/practice.html"
fi


cp cs164/introduction.html cs164/index.html
