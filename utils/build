#!/bin/bash
# Charlie Rose
# A script to build my webpages for my personal site

LASTBUILD="./utils/lastbuild.txt"
BUILDFILES="./utils/build ./utils/template.html ./utils/mdtohtml"
BUILDCHNG=""

TEMPLATE=$(cat ./utils/template.html)
MD_SRC='./markdownfiles'
BLOGMD_SRC="${MD_SRC}/blog"
BLOGPOST_SRC="./blogposts"
BLOG_TEMPLATE="${TEMPLATE}"
BLOG_TEMPLATE=${BLOG_TEMPLATE//.\//..\/..\/}

CARRAY=( "pp" "pb" "pg" "py" "po" "pr" "pi" )
CHL=${#CARRAY[@]}

echo "Last Build: $(cat $LASTBUILD)"

# See if the build change was intentional
for f in $BUILDFILES
do
	if [ "$f" -nt "$LASTBUILD" ]
	then
		echo -e "\033[01;33mWARNING\033[00m: $f has been changed since last build"
		echo "Continue? [y/n]"
		read CONT

		if [ "$CONT" != "y" ]
		then
			echo "Aborted"
			exit 1
		fi

		BUILDCHNG="true"
	else
		echo "$f has not been changed since last build"
	fi
done

for IN_FILE in "${MD_SRC}"/*.md
do
	OUT_FILE=.${IN_FILE#${MD_SRC}}
	OUT_FILE=${OUT_FILE%.md}.html

	# Don't build the file if
	#	The markdown is older than the HTML file
	#	AND the build script hasn't been changed
	#	AND the template hasn't been changed
	if [ "${IN_FILE}" -ot "${OUT_FILE}" ] && [ -z $BUILDCHNG ] && [ -z $TMPLTCHNG ]
	then
		echo "Ignored ${IN_FILE}": No recent changes
		continue
	fi

	echo "Building ${OUT_FILE} from ${IN_FILE}..."
	utils/build_page "${IN_FILE}" "${TEMPLATE}"
done

echo "Completed main HTML files from Markdown"

utils/build_experience

utils/build_projects

utils/build_activism

###
### Build the Blog
###

if [ ! -e "${BLOGPOST_SRC}" ]
then
	mkdir ${BLOGPOST_SRC}
	echo "Built blogpost directory"
fi

echo "Building blog HTML files from Markdown..."

BLOG_CONTENT=" "

for IN_FILE in $(find "${BLOGMD_SRC}" -mindepth 1 -maxdepth 1 | sort -r)
do
	IN_FILE="${IN_FILE#"${BLOGMD_SRC}/"}"

	# Don't build wip pages
	if [[ "${IN_FILE}" != "${IN_FILE%wip*}" ]]
	then
		echo "Ignored ${IN_FILE}: WIP file"
		continue
	fi

	DATE=${IN_FILE%_*}
	DIRDATE=${DATE//-/}
	DIRDATE=${DIRDATE%x}
	MONTH=${DATE%-*}
	MONTH=${MONTH#*-}
	DAY=${DATE##*-}

	if [[ "$YEAR" != "${DATE%%-*}" ]]
	then
		BLOG_CONTENT="${BLOG_CONTENT}<h3 class='blogh'>${DATE%%-*}</h3>"
	fi

	YEAR=${DATE%%-*}
	PRETTYDATE="${MONTH}/${DAY}/${YEAR}"

	METADATA=$(head -n 3 "${BLOGMD_SRC}/${IN_FILE}")

	TITLE=$(echo "$METADATA" | tail -n 1)
	TITLE=${TITLE#"# "}
	TITLE=${TITLE//\\/}

	OUT_FILE=${BLOGPOST_SRC}/${DIRDATE}/${IN_FILE##*_}
	OUT_FILE=${OUT_FILE%.md}.html

	if [ ! -e "${BLOGPOST_SRC}/${DIRDATE}" ]
	then
		mkdir "${BLOGPOST_SRC}/${DIRDATE}"
		echo "Made ${BLOGPOST_SRC}/${DIRDATE} directory for blogposts"
	fi

	if [[ "${DATE}" = "${DATE%x}" ]]
	then
		ENTRY_LINK="<a class='bloglink' href='${OUT_FILE#./}'>$PRETTYDATE : $TITLE</a>"
		BLOG_CONTENT="${BLOG_CONTENT}${ENTRY_LINK}<br>"
	fi

	# Don't rebuild if
	#	the template is older than the last build
	#	AND the build script is older than the last build
	#	AND the markdown file is older than the HTML file
	if [ "${BLOGMD_SRC}/${IN_FILE}" -ot "${OUT_FILE}" ] && [ -e $BUILDCHNG ] && [ -e $TMPLTCHNG ]
	then
		continue
	fi

	DATA=$(tail -n +3 "${BLOGMD_SRC}/${IN_FILE}")
	DATA=${DATA#${METADATA}}

	CSSCSV=$(echo "$METADATA" | tail -n 2 | head -n 1)
	CSSPAGES=""
	for THISCSS in $CSSCSV
	do
		CSSPAGES="${CSSPAGES}<link rel=\"stylesheet\" type=\"text/css\" href=\"${THISCSS}\">"
	done

	CONTENT=$(echo "${DATA}" | pandoc -p )
	echo " Coverted to HTML with pandoc"
	CONTENT=$(./utils/mdtohtml "${CONTENT}")
	echo " Adding Charlie customization"

	# Fixing template links and inserting content
	HTMLPAGE=${BLOG_TEMPLATE}
	HTMLPAGE="${HTMLPAGE/<!-- HEADING -->/ - Blog}"
	HTMLPAGE="${HTMLPAGE/<!-- XTRACSS -->/${CSSPAGES}}"
	HTMLPAGE="${HTMLPAGE/<!-- CONTENT -->/${CONTENT}}"

	
	# Build HTML page
	echo "${HTMLPAGE}" > "${OUT_FILE}"

	echo "  Built ${OUT_FILE} from ${IN_FILE}"
done

echo "Built all blog HTML files from Markdown"

OUT_FILE="blog.html"

HTMLPAGE=${TEMPLATE}
HTMLPAGE="${HTMLPAGE/<!-- HEADING -->/ - Blog}"
HTMLPAGE="${HTMLPAGE/<!-- CONTENT -->/${BLOG_CONTENT}}"

echo "${HTMLPAGE}" > "${OUT_FILE}"

echo "Built main blog page"

CONTENT=$(tail -n +2 "${MD_SRC}/index.md")
CONTENT="${CONTENT%%###*}"
CONTENT="${CONTENT//|/'\n'}"
echo -e "${CONTENT}<https://charlierose.dev>" > README.md

echo "Built README.md"

LB=$(date)
echo "Built $LB" > "$LASTBUILD"
echo "Built $LB"

