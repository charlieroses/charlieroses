#!/bin/bash
# Charlie Rose
# A script to build my webpages for my personal site

LASTBUILD="./utils/lastbuild.txt"
BUILDFILES="./utils/build ./utils/template.html ./utils/mdtohtml"
BUILDCHNG=""

TEMPLATE=$(cat ./utils/template.html)
MD_SRC='./markdownfiles'
BLOGMD_SRC="${MD_SRC}/blog"
BLOGPOST_SRC="./blogposts"
BLOG_TEMPLATE="${TEMPLATE}"
BLOG_TEMPLATE=${BLOG_TEMPLATE//.\//..\/..\/}

CARRAY=( "pp" "pb" "pg" "py" "po" "pr" "pi" )
CHL=${#CARRAY[@]}

SHEADERS=( "NONE" )
SHL=${#SHEADERS[@]}

function contentfromfiles {
	# $1 File names
	# Builds the content for experience, projects, and activism
	CONTENT=""
	SUB=""
	i=0
	for TXT_FILE in $1
	do
		if grep -q "Multi:" < <(head -n 2 "$TXT_FILE")
		then
			j=0
			s=3
			e=0
			len=$(head -n 2 "$TXT_FILE" | tail -n 1)
			len="${len##*:}"
			TITLE="$(head -n 1 "$TXT_FILE")"
			ID=${TXT_FILE##*_}
			ID=${ID%.txt}
			SUB="<h3 id=\"${ID}\" class=\"${CARRAY[$i]}\">${TITLE}</h3>"
			while [[ $j < $len ]]
			do
				e=$(head -n $((s+1)) $TXT_FILE | tail -n 1)
				e=${e%%,*}
				CHUNK="$(head -n "$((e-1))" "$TXT_FILE" | tail -n "+${s}" )"
				SUB="${SUB}$(subcontent "$CHUNK")"
				s=$e
				j=$((j+1))
			done
		else
			SUB="$(subcontent "0" $TXT_FILE ${CARRAY[$i]})"
		fi
		CONTENT="${CONTENT}<hr>${SUB}"
		i=$(( i+1 ))
		i=$(( i%CHL ))
	done

	echo "${CONTENT#<hr>}"
}

function subcontent {
	# $1 file content if file name not provided
	# $2 file name
	# $3 (if provided) Title Color
	# Parses a .txt file found in the experience, projects, and activism sections
	CONTENT=""
	FC=""

	if [ -n "$2" ]
	then
		FC="$(cat $2)"
		TITLE="$(echo "$FC" | head -n 1)"
		ID=${2##*/}
		ID=${ID%.txt}
		CONTENT="${CONTENT}<h3 id=\"${ID}\""
	
		if [ -n $3 ]
		then
			CONTENT="${CONTENT} class=\"$3\""
		fi
		CONTENT="${CONTENT}>${TITLE}</h3>"
	else
		FC="$1"
		TITLE="$(echo "$FC" | head -n 1)"
		CONTENT="${CONTENT}<p><b>${TITLE}</b></p>"
	fi

	TYPE="$(echo  "$FC" | head -n 2 | tail -n 1)"
	OTHER="$(echo "$FC" | head -n 3 | tail -n 1)"
	START="$(echo "$FC" | head -n 4 | tail -n 1)"
	END="$(echo   "$FC" | head -n 5 | tail -n 1)"
	LOC="$(echo   "$FC" | head -n 6 | tail -n 1)"
	DESC="$(echo  "$FC" | tail -n +7 )"

	if grep -q "Event" <<< "${TYPE}"
	then
		CONTENT="${CONTENT}<p><em>${START} @ ${LOC}</em></p>"
	else
		if [ -n "${LOC}" ] && [[ "$(expr match "${LOC}" "null")" != 4 ]]
		then
			CONTENT="${CONTENT}<p><em>${LOC}</em></p>"
		fi

		if grep -q "Ongoing" <<< "${TYPE}"
		then
			CONTENT="${CONTENT}<p><em>Since ${START}</em></p>"
		elif grep -q "Previous" <<< "${TYPE}"
		then
			if grep -q "OneDay" <<< "${TYPE}"
			then
				CONTENT="${CONTENT}<p><em>${START}</em></p>"
			else
				CONTENT="${CONTENT}<p><em>${START} - ${END}</em></p>"
			fi
		elif grep -q "Frozen" <<< "${TYPE}"
		then
			CONTENT="${CONTENT}<p><em>${START} - ${END}</em></p>"
		fi
	fi

	if [ -n "${OTHER}" ] && [[ "$(expr match "${OTHER}" "null")" != 4 ]]
	then
		CONTENT="${CONTENT}<p><em>${OTHER}</em></p>"
	fi

	DESC="$(echo "${DESC}" | pandoc -p)"
	DESC="$(./utils/mdtohtml "${DESC}")"
	if [ -n $3 ]
	then
		DESC="${DESC//"<a"/"<a class=\"$3\""}"
	fi
	CONTENT="${CONTENT}${DESC}"

	echo "$CONTENT"
}

function build_dir_fancy {
	DIR="$1"
	DIR_LC=$(echo "${DIR}" | awk '{print tolower($0)}')

	if [ ! -e "${DIR_LC}" ]
	then
		mkdir "${DIR_LC}"
		echo "Built ${DIR_LC} directory"
	fi

	HTMLPAGE=${TEMPLATE//.\//..\/}
	CSSPAGE="<link rel=\"stylesheet\" type=\"text/css\" href=\"./${DIR_LC}.css\">"
	HTMLPAGE="${HTMLPAGE/<!-- XTRACSS -->/${CSSPAGE}}"
	HEADER="- SH ${DIR}"
	CONTENT=""

	for (( i=0; i<${SHL}; i++ ))
	do
		c=$(( i%CHL ))
		LC=$(echo "${SHEADERS[$i]}" | awk '{print tolower($0)}')
		CONTENT="${CONTENT}<a class=\"${CARRAY[$c]}\" "
		if [[ "${LC}" = "ongoing" ]]
		then
			CONTENT="${CONTENT}href=\"index.html\">"
		else
			CONTENT="${CONTENT}href=\"$LC.html\">"
		fi
		CONTENT="${CONTENT}[$LC]</a> "
	done
	HTMLPAGE="${HTMLPAGE/<!-- CONTENT -->/${CONTENT} 2CONTENT2}"

	for (( i=0; i<${SHL}; i++ ))
	do
		LC=$(echo "${SHEADERS[$i]}" | awk '{print tolower($0)}')
		PROJS=""
		for file in $(cat ${MD_SRC}/${DIR_LC}/priority)
		do
			if grep -q "${SHEADERS[$i]}" "${MD_SRC}/${DIR_LC}/${file}.txt"
			then
				PROJS="${PROJS} ${MD_SRC}/${DIR_LC}/${file}.txt"
			fi
		done
		SUB="$(contentfromfiles "${PROJS}")"
		SUBPAGE="${HTMLPAGE}"
		SUBPAGE="${SUBPAGE/<!-- HEADING -->/${HEADER/SH/${SHEADERS[$i]}}}"
		SUBPAGE="${SUBPAGE/2CONTENT2/<hr>${SUB}}"
		echo "${SUBPAGE}" > "${DIR_LC}/${LC}.html"
	done

	mv "${DIR_LC}/ongoing.html" "${DIR_LC}/index.html"
}



echo "Last Build: $(cat $LASTBUILD)"

# See if the build change was intentional
for f in $BUILDFILES
do
	if [ "$f" -nt "$LASTBUILD" ]
	then
		echo -e "\033[01;33mWARNING\033[00m: $f has been changed since last build"
		echo "Continue? [y/n]"
		read CONT

		if [ "$CONT" != "y" ]
		then
			echo "Aborted"
			exit 1
		fi

		BUILDCHNG="true"
	else
		echo "$f has not been changed since last build"
	fi
done

for IN_FILE in "${MD_SRC}"/*
do
	# Skip the directories
	if [ -d "${IN_FILE}" ]
	then
		continue
	fi

	OUT_FILE=.${IN_FILE#${MD_SRC}}
	OUT_FILE=${OUT_FILE%.md}.html

	
	# Don't build the file if
	#	The markdown is older than the HTML file
	#	AND the build script hasn't been changed
	#	AND the template hasn't been changed
	if [ "${IN_FILE}" -ot "${OUT_FILE}" ] && [ -e $BUILDCHNG ] && [ -e $TMPLTCHNG ]
	then
		echo "Ignored ${IN_FILE}": No recent changes
		continue
	fi

	CONTENT="$(pandoc --preserve-tabs "${IN_FILE}")"

	HTMLPAGE=${TEMPLATE}
	HTMLPAGE="${HTMLPAGE/<!-- HEADING -->/ }"
	HTMLPAGE="${HTMLPAGE/<!-- CONTENT -->/${CONTENT}}"

	echo "${HTMLPAGE}" > "${OUT_FILE}"
	
	echo "Built ${OUT_FILE} from ${IN_FILE}..."
done

echo "Completed main HTML files from Markdown"

SHEADERS=( "Ongoing" "Non-Technical" "Previous" )
SHL=${#SHEADERS[@]}
build_dir_fancy "Projects"

SHEADERS=( "Ongoing" "Teaching" "Research" )
SHL=${#SHEADERS[@]}
build_dir_fancy "Experience"

FILES="$(ls -1 ${MD_SRC}/activism/*.txt | sort)"
CONTENT="$(contentfromfiles "${FILES}")"
HTMLPAGE=${TEMPLATE}
HTMLPAGE="${HTMLPAGE/<!-- HEADING -->/ - Activism}"
HTMLPAGE="${HTMLPAGE/<!-- CONTENT -->/${CONTENT}}"
echo "${HTMLPAGE}" > "activism.html"

###
### Build the Blog
###

if [ ! -e "${BLOGPOST_SRC}" ]
then
	mkdir ${BLOGPOST_SRC}
	echo "Built blogpost directory"
fi

echo "Building blog HTML files from Markdown..."

BLOG_CONTENT=" "

for IN_FILE in $(find "${BLOGMD_SRC}" -mindepth 1 -maxdepth 1 | sort -r)
do
	IN_FILE="${IN_FILE#"${BLOGMD_SRC}/"}"

	# Don't build wip pages
	if [[ "${IN_FILE}" != "${IN_FILE%wip*}" ]]
	then
		echo "Ignored ${IN_FILE}: WIP file"
		continue
	fi

	DATE=${IN_FILE%_*}
	DIRDATE=${DATE//-/}
	DIRDATE=${DIRDATE%x}
	MONTH=${DATE%-*}
	MONTH=${MONTH#*-}
	DAY=${DATE##*-}

	if [[ "$YEAR" != "${DATE%%-*}" ]]
	then
		BLOG_CONTENT="${BLOG_CONTENT}<h3 class='blogh'>${DATE%%-*}</h3>"
	fi

	YEAR=${DATE%%-*}
	PRETTYDATE="${MONTH}/${DAY}/${YEAR}"

	METADATA=$(head -n 3 "${BLOGMD_SRC}/${IN_FILE}")

	TITLE=$(echo "$METADATA" | tail -n 1)
	TITLE=${TITLE#"# "}
	TITLE=${TITLE//\\/}

	OUT_FILE=${BLOGPOST_SRC}/${DIRDATE}/${IN_FILE##*_}
	OUT_FILE=${OUT_FILE%.md}.html

	if [ ! -e "${BLOGPOST_SRC}/${DIRDATE}" ]
	then
		mkdir "${BLOGPOST_SRC}/${DIRDATE}"
		echo "Made ${BLOGPOST_SRC}/${DIRDATE} directory for blogposts"
	fi

	if [[ "${DATE}" = "${DATE%x}" ]]
	then
		ENTRY_LINK="<a class='bloglink' href='${OUT_FILE#./}'>$PRETTYDATE : $TITLE</a>"
		BLOG_CONTENT="${BLOG_CONTENT}${ENTRY_LINK}<br>"
	fi

	# Don't rebuild if
	#	the template is older than the last build
	#	AND the build script is older than the last build
	#	AND the markdown file is older than the HTML file
	if [ "${BLOGMD_SRC}/${IN_FILE}" -ot "${OUT_FILE}" ] && [ -e $BUILDCHNG ] && [ -e $TMPLTCHNG ]
	then
		continue
	fi

	DATA=$(tail -n +3 "${BLOGMD_SRC}/${IN_FILE}")
	DATA=${DATA#${METADATA}}

	CSSCSV=$(echo "$METADATA" | tail -n 2 | head -n 1)
	CSSPAGES=""
	for THISCSS in $CSSCSV
	do
		CSSPAGES="${CSSPAGES}<link rel=\"stylesheet\" type=\"text/css\" href=\"${THISCSS}\">"
	done

	CONTENT=$(echo "${DATA}" | pandoc -p )
	echo " Coverted to HTML with pandoc"
	CONTENT=$(./utils/mdtohtml "${CONTENT}")
	echo " Adding Charlie customization"

	# Fixing template links and inserting content
	HTMLPAGE=${BLOG_TEMPLATE}
	HTMLPAGE="${HTMLPAGE/<!-- HEADING -->/ - Blog}"
	HTMLPAGE="${HTMLPAGE/<!-- XTRACSS -->/${CSSPAGES}}"
	HTMLPAGE="${HTMLPAGE/<!-- CONTENT -->/${CONTENT}}"

	
	# Build HTML page
	echo "${HTMLPAGE}" > "${OUT_FILE}"

	echo "  Built ${OUT_FILE} from ${IN_FILE}"
done

echo "Built all blog HTML files from Markdown"

OUT_FILE="blog.html"

HTMLPAGE=${TEMPLATE}
HTMLPAGE="${HTMLPAGE/<!-- HEADING -->/ - Blog}"
HTMLPAGE="${HTMLPAGE/<!-- CONTENT -->/${BLOG_CONTENT}}"

echo "${HTMLPAGE}" > "${OUT_FILE}"

echo "Built main blog page"

CONTENT=$(tail -n +2 "${MD_SRC}/index.md")
CONTENT="${CONTENT%%###*}"
CONTENT="${CONTENT//|/'\n'}"
echo -e "${CONTENT}<https://charlierose.dev>" > README.md

echo "Built README.md"

LB=$(date)
echo "Built $LB" > "$LASTBUILD"
echo "Built $LB"

